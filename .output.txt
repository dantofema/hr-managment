# Registro de planificación técnica - App RRHH (Prueba técnica)

**Duración máxima estimada:** 6 horas  
**Stack:** Symfony 7 (backend), Vue + TailwindCSS (frontend)  
**Infraestructura IA:** MCP con múltiples agentes

---

## 🎯 Objetivo

Desarrollar una aplicación para la gestión de Recursos Humanos, que incluya:

- Una version simplificada para la Gestión de empleados
- Una version simplificada para la Gestión de nóminas
- Una version simplificada para la Gestión de vacaciones
- Una version simplificada para la Procesos de contratación
- Todos los endpoints deben estar documentados con swagger siguiendo las buenas
  practicas de symfony
- Las tablas deben tener la menor cantidad posible de columnas
- El proyecto debe estar alineado con DDD y seguir sus buenas practicas

---

## 🧪 Reglas obligatorias en cada feature

- Cada funcionalidad nueva debe incluir un test con PHPUnit
- Todos los tests deben ejecutarse sin errores (`phpunit`)
- Todo debe funcionar desde Docker
- No se permite commit sin tests pasando correctamente

---

## 🗃️ Estructura sugerida para almacenar prompts

```
/prompts
├── planner
│   ├── prompt.system.txt
│   ├── ejemplos/
│   │   ├── listar-empleados.user.txt
│   │   └── listar-empleados.assistant.txt
├── filesystem
│   ├── prompt.system.txt
│   ├── ejemplos/
├── postgres
│   ├── prompt.system.txt
│   ├── ejemplos/
├── git
│   ├── prompt.system.txt
│   ├── ejemplos/
```

## 📌 Estado actual de los servidores MCP

```json
{
  "default_policy": "allow",
  "servers": {
    "sequential-thinking": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-sequential-thinking"
      ],
      "allow": [
        "read",
        "write"
      ]
    },
    "filesystem": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-filesystem",
        "/home"
      ],
      "allow": [
        "read_file",
        "write_file",
        "list_directory",
        "create_directory",
        "read_multiple_files",
        "edit_file"
      ]
    },
    "git": {
      "command": "uvx",
      "args": [
        "mcp-server-git",
        "--repository",
        "/home/alejandro/projects/dgeo"
      ],
      "allow": [
        "read",
        "write",
        "commit",
        "push"
      ]
    },
    "github": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-github"
      ],
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": "ghp_..."
      },
      "allow": [
        "read",
        "write"
      ]
    },
    "postgres": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-postgres",
        "postgresql://postgres:password@localhost:5432/dgeo"
      ],
      "allow": [
        "read",
        "write"
      ]
    },
    "fetch": {
      "command": "uvx",
      "args": [
        "mcp-server-fetch"
      ],
      "allow": [
        "read",
        "write"
      ]
    }
  }
}
```

## Agentes base:

- sequential-thinking: como planner/coordinador
- filesystem: para leer y escribir archivos del proyecto

## Objetivo del prompt del planner (sequential-thinking)

Entienda que está en un test técnico de RRHH
Organice las tareas
Genere instrucciones precisas para filesystem, postgres, git
Cumpla en 6 horas

### Propuesta Prompt para sequential-thinking (planner/coordinador)

``` md
Sos un agente IA que actúa como arquitecto y coordinador de desarrollo de software.

Estás participando en una prueba técnica con tiempo limitado (máx. 6 horas) para desarrollar un sistema de gestión de Recursos Humanos (RRHH).

El sistema debe incluir:  
- Gestión de empleados  
- Gestión de nóminas  
- Gestión de vacaciones  
- Procesos de contratación  

### Tecnología
- Backend: Symfony 7
- Frontend: Vue + TailwindCSS
- Base de datos: PostgreSQL
- Utilizar Docker para todo el entorno de desarrollo y ejecución
- Seguir la arquitectura DDD
- implementar CORS solamente en los endpoints de empleados

### Objetivo de tu rol
1. Dividir cada requerimiento en pasos técnicos concretos.
2. Indicar a otros agentes (como `filesystem`, `postgres`, `git`) qué deben hacer.
3. Optimizar el flujo de trabajo para cumplir con los tiempos del test.
4. Priorizar tareas que muestren valor rápidamente (MVP funcional).
5. Evitar sobreingeniería: resolver lo justo y necesario para cumplir con el objetivo.

### Disponés de los siguientes servidores
- `filesystem`: lee y escribe archivos del proyecto (código fuente)
- `postgres`: crea, lee o modifica la base de datos
- `git`: permite versionar los cambios
- `github`: opcional para subir a repo remoto
- `fetch`: para obtener contenido de URLs
- `sequential-thinking`: es vos mismo, podés coordinar tareas paso a paso

Cuando recibas una solicitud del usuario, respondé con un **plan técnico paso a paso**, y en cada paso indicá qué agente debe intervenir y cómo.  
Mantené foco, claridad y velocidad.

### ✅ Tus requisitos clave
Cada funcionalidad nueva debe tener su test con PHPUnit
Los tests deben ejecutarse sin errores luego de cada cambio
Todo el sistema debe funcionar dentro de Docker

📌 Reglas obligatorias:

- Cada nueva funcionalidad debe incluir un test automatizado usando PHPUnit.
- Los tests deben ejecutarse al finalizar cada tarea. No puede haber errores.
- El entorno de desarrollo y ejecución está totalmente dockerizado. Todos los
  comandos deben ejecutarse dentro de los contenedores definidos.
- No se permiten commits si los tests no pasan correctamente.
- Si hay errores, corregir antes de continuar
- Hacer commit solo si los tests pasan


---

## Ejecución de tests dentro de Docker

Para correr los tests automáticos dentro del contenedor Docker, utiliza el
siguiente comando:

docker-compose exec php php bin/phpunit
---

Asegúrate de que el contenedor php esté en ejecución antes de ejecutar el
comando.

---

## Simplicidad en el flujo de trabajo

- No es necesario seguir una política de ramas compleja. Todo el trabajo puede
  realizarse en la rama principal (main o master).
- El objetivo es mantener el flujo lo más simple posible, ya que se trata de una
  prueba técnica y no de un proyecto real.

---

## Sobre los tests

- No se exige una cobertura mínima de tests.
- Se espera que cada funcionalidad tenga al menos un test simple que demuestre
  conocimientos básicos de testing en Symfony.
- La prueba técnica debe ser funcional y demostrar comprensión de los conceptos
  básicos de tests automatizados.

---

## Ejemplo de comandos útiles

- Ejecutar tests:

  docker-compose exec php php bin/phpunit

- (Opcional) Ejecutar un test específico:

  docker-compose exec php php bin/phpunit tests/NombreDelTest.php


```